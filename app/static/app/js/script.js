// ==================== Ch·∫ø ƒë·ªô t·ªëi/s√°ng (Dark Mode) ====================
// Thi·∫øt l·∫≠p theme ban ƒë·∫ßu, x·ª≠ l√Ω n√∫t toggle, l∆∞u v√†o localStorage
(() => {
  const storageKeyForTheme = "theme";
  const themeToggleButtonElement = document.getElementById("themeToggle");
  const systemPrefersDark = window.matchMedia(
    "(prefers-color-scheme: dark)"
  ).matches;

  const persistedTheme = localStorage.getItem(storageKeyForTheme);
  const initialTheme = persistedTheme || (systemPrefersDark ? "dark" : "light");
  setTheme(initialTheme);

  themeToggleButtonElement?.addEventListener("click", () => {
    const nextTheme =
      document.documentElement.getAttribute("data-theme") === "dark"
        ? "light"
        : "dark";
    setTheme(nextTheme);
    localStorage.setItem(storageKeyForTheme, nextTheme);
  });

  function setTheme(themeMode) {
    document.documentElement.setAttribute("data-theme", themeMode);
    if (themeToggleButtonElement) {
      themeToggleButtonElement.textContent = themeMode === "dark" ? "‚òÄÔ∏è" : "üåô";
      themeToggleButtonElement.setAttribute(
        "aria-label",
        themeMode === "dark" ? "Chuy·ªÉn sang s√°ng" : "Chuy·ªÉn sang t·ªëi"
      );
    }
  }
})();

// ==================== Nh·ªõ filter khi ƒëi/ƒë·∫øn trang chi ti·∫øt ====================
// L∆∞u filter hi·ªán t·∫°i khi b·∫•m v√†o card; kh√¥i ph·ª•c khi b·∫•m quay l·∫°i.
document.addEventListener("DOMContentLoaded", () => {
  const storageKeyForLastListQuery = "last_list_query";

  // 1) B·∫•m card -> l∆∞u query hi·ªán t·∫°i r·ªìi ƒëi t·ªõi trang chi ti·∫øt
  document.addEventListener("click", (event) => {
    const clickableCard = event.target.closest(".card-link");
    if (!clickableCard) return;

    sessionStorage.setItem(
      storageKeyForLastListQuery,
      location.search.replace(/^\?/, "")
    );

    const destinationUrl =
      clickableCard.getAttribute("href") ||
      clickableCard.getAttribute("data-href");
    if (destinationUrl && clickableCard.tagName !== "A") {
      event.preventDefault();
      location.href = destinationUrl;
    }
  });

  // 2) B·∫•m "quay l·∫°i danh s√°ch"
  document.addEventListener("click", (event) => {
    const backLinkElement = event.target.closest(".link-back-to-list");
    if (!backLinkElement) return;
    event.preventDefault();

    const savedQuery = sessionStorage.getItem(storageKeyForLastListQuery) || "";
    location.href = savedQuery ? `/?${savedQuery}` : "/";
  });

  // 3) N·∫øu v√†o Home kh√¥ng c√≥ query, t·ª± kh√¥i ph·ª•c filter g·∫ßn nh·∫•t (n·∫øu c√≥)
  if (location.pathname === "/" && !location.search) {
    const savedQuery = sessionStorage.getItem(storageKeyForLastListQuery);
    if (savedQuery) location.replace(`/?${savedQuery}`);
  }
});

// ==================== L·ªçc + Ph√¢n trang + T√¨m ki·∫øm b·∫±ng AJAX ====================
document.addEventListener("DOMContentLoaded", () => {
  const filterFormElement = document.getElementById("filters"); // Form b·ªô l·ªçc
  const cardsContainerElement = document.getElementById("cards"); // Khu hi·ªÉn th·ªã cards + ph√¢n trang
  const priceBandHiddenInputElement = document.getElementById("priceBandInput"); // Input ·∫©n cho ‚Äúm·ª©c gi√°‚Äù
  const storageKeyForLastListQuery = "last_list_query";

  // T√¨m ki·∫øm (header)
  const searchFormElement = document.getElementById("searchFormElement");
  const searchTextInputElement = document.getElementById(
    "searchTextInputElement"
  );
  const searchTextHiddenInputElement = document.getElementById(
    "searchTextHiddenInputElement"
  );

  // N·∫øu kh√¥ng ph·∫£i trang Home (kh√¥ng c√≥ form ho·∫∑c kh√¥ng c√≥ #cards) -> b·ªè qua kh·ªëi n√†y
  if (!filterFormElement || !cardsContainerElement) return;

  // Tr·∫°ng th√°i cho c√°c request AJAX
  let currentAbortController = null;
  let debounceTimerId = null;
  let lastQueryStringCache = null;

  function buildQueryStringFromForm(formElement) {
    return new URLSearchParams(new FormData(formElement));
  }

  function applyQueryStringToForm(queryString) {
    // ƒê·ªìng b·ªô checkbox, radio, select, input text c·ªßa form filters theo URL
    const params = new URLSearchParams(queryString);
    Array.from(filterFormElement.elements).forEach((element) => {
      if (!element.name) return;

      if (element.type === "checkbox") {
        element.checked = params.getAll(element.name).includes(element.value);
      } else if (element.type === "radio") {
        element.checked = (params.get(element.name) || "") === element.value;
      } else {
        element.value = params.get(element.name) || "";
      }
    });
    // ƒê·ªìng b·ªô chip m·ª©c gi√°
    setActivePriceChipFromHiddenInput();

    // ƒê·ªìng b·ªô √¥ t√¨m ki·∫øm ·ªü header + input ·∫©n trong filters
    const searchTextFromUrl = params.get("search_text") || "";
    if (searchTextInputElement)
      searchTextInputElement.value = searchTextFromUrl;
    if (searchTextHiddenInputElement)
      searchTextHiddenInputElement.value = searchTextFromUrl;
  }

  function setCardsLoadingState(isLoading) {
    cardsContainerElement.classList.toggle("is-loading", isLoading);
  }

  function setActivePriceChipFromHiddenInput() {
    const chips = document.querySelectorAll(".chip");
    chips.forEach((chip) => {
      chip.classList.remove("active");
      chip.setAttribute("aria-pressed", "false");
    });
    const selectedValue = priceBandHiddenInputElement?.value || "";
    if (!selectedValue) return;
    const activeChip = document.querySelector(
      `.chip[data-value="${selectedValue}"]`
    );
    if (activeChip) {
      activeChip.classList.add("active");
      activeChip.setAttribute("aria-pressed", "true");
    }
  }

  function debounceRefresh(delayMilliseconds = 180) {
    clearTimeout(debounceTimerId);
    debounceTimerId = setTimeout(
      () => refreshCardsWithAjax(true),
      delayMilliseconds
    );
  }

  async function fetchAndRenderCards(
    queryString,
    shouldReplaceUrlInHistory = true
  ) {
    if (queryString === lastQueryStringCache) return;
    lastQueryStringCache = queryString;

    if (currentAbortController) currentAbortController.abort();
    currentAbortController = new AbortController();

    setCardsLoadingState(true);
    try {
      const response = await fetch(`?${queryString}`, {
        headers: { "X-Requested-With": "XMLHttpRequest" },
        signal: currentAbortController.signal,
      });
      const partialHtml = await response.text();
      cardsContainerElement.innerHTML = partialHtml;

      if (shouldReplaceUrlInHistory) {
        history.replaceState(null, "", `?${queryString}`);
      }

      // L∆∞u query m·ªói l·∫ßn l·ªçc/ph√¢n trang/t√¨m ki·∫øm ƒë·ªÉ c√≥ th·ªÉ kh√¥i ph·ª•c khi quay l·∫°i
      sessionStorage.setItem(storageKeyForLastListQuery, queryString);

      cardsContainerElement.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    } catch (error) {
      if (error.name !== "AbortError") console.error(error);
    } finally {
      setCardsLoadingState(false);
    }
  }

  async function refreshCardsWithAjax(shouldReplaceUrlInHistory = true) {
    const queryParams = buildQueryStringFromForm(filterFormElement);
    await fetchAndRenderCards(
      queryParams.toString(),
      shouldReplaceUrlInHistory
    );
  }

  async function refreshCardsWithPage(
    pageNumber,
    shouldReplaceUrlInHistory = true
  ) {
    const queryParams = buildQueryStringFromForm(filterFormElement);
    queryParams.set("page", pageNumber);
    await fetchAndRenderCards(
      queryParams.toString(),
      shouldReplaceUrlInHistory
    );
  }

  // --- B·∫Øt s·ª± ki·ªán: Ph√¢n trang ---
  document.addEventListener("click", (event) => {
    const linkElement = event.target.closest("a.page-link[data-page]");
    if (!linkElement) return;
    event.preventDefault();
    refreshCardsWithPage(linkElement.dataset.page, true);
  });

  // --- B·∫Øt s·ª± ki·ªán: Thay ƒë·ªïi b·∫•t k·ª≥ filter n√†o ---
  filterFormElement.addEventListener("change", () => debounceRefresh());

  // --- B·∫Øt s·ª± ki·ªán: Chip m·ª©c gi√° ---
  document.querySelectorAll(".chip").forEach((chip) => {
    chip.addEventListener("click", () => {
      const selectedValue = chip.dataset.value || "";
      priceBandHiddenInputElement.value =
        priceBandHiddenInputElement.value === selectedValue
          ? ""
          : selectedValue;
      setActivePriceChipFromHiddenInput();
      debounceRefresh();
    });
  });

  // --- B·∫Øt s·ª± ki·ªán: NgƒÉn submit th·∫≠t c·ªßa form filters ---
  filterFormElement.addEventListener("submit", (event) => {
    event.preventDefault();
    debounceRefresh();
  });

  // --- B·∫Øt s·ª± ki·ªán: T√¨m ki·∫øm (submit + g√µ live) ---
  if (
    searchFormElement &&
    searchTextInputElement &&
    searchTextHiddenInputElement
  ) {
    // Submit t√¨m ki·∫øm
    searchFormElement.addEventListener("submit", (event) => {
      event.preventDefault();
      searchTextHiddenInputElement.value = (
        searchTextInputElement.value || ""
      ).trim();

      const newParams = new URLSearchParams(new FormData(filterFormElement));
      newParams.set("search_text", searchTextHiddenInputElement.value);
      newParams.delete("page"); // v·ªÅ trang 1
      fetchAndRenderCards(newParams.toString(), true);
    });

    // G√µ ƒë·ªÉ t√¨m live (debounce)
    let searchTypingDebounceId = null;
    searchTextInputElement.addEventListener("input", () => {
      clearTimeout(searchTypingDebounceId);
      searchTypingDebounceId = setTimeout(() => {
        searchTextHiddenInputElement.value = (
          searchTextInputElement.value || ""
        ).trim();
        const newParams = new URLSearchParams(new FormData(filterFormElement));
        newParams.set("search_text", searchTextHiddenInputElement.value);
        newParams.delete("page"); // v·ªÅ trang 1
        fetchAndRenderCards(newParams.toString(), true);
      }, 250);
    });

    // Nh·∫•n ESC ƒë·ªÉ x√≥a nhanh v√† t√¨m l·∫°i
    searchTextInputElement.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        searchTextInputElement.value = "";
        searchTextHiddenInputElement.value = "";
        const newParams = new URLSearchParams(new FormData(filterFormElement));
        newParams.set("search_text", "");
        newParams.delete("page");
        fetchAndRenderCards(newParams.toString(), true);
      }
    });
  }

  // --- Back/Forward c·ªßa tr√¨nh duy·ªát: ƒë·ªìng b·ªô form theo URL r·ªìi render ---
  window.addEventListener("popstate", () => {
    const urlParams = new URLSearchParams(location.search);
    applyQueryStringToForm(location.search.replace(/^\?/, ""));
    const pageOnUrl = urlParams.get("page");
    if (pageOnUrl) {
      refreshCardsWithPage(pageOnUrl, false);
    } else {
      refreshCardsWithAjax(false);
    }
  });

  // --- Kh·ªüi t·∫°o: ƒë·ªìng b·ªô filter + √¥ t√¨m ki·∫øm t·ª´ URL ngay khi v√†o Home ---
  applyQueryStringToForm(location.search.replace(/^\?/, ""));
});

// ==================== Slider trang chi ti·∫øt ====================
window.addEventListener("load", () => {
  const sliderElement = document.querySelector(".slider");
  if (!sliderElement) return;

  const slideImages = Array.from(sliderElement.querySelectorAll("img"));
  const dotElements = Array.from(document.querySelectorAll(".slider-nav a"));
  if (slideImages.length <= 1) return;

  let currentIndex = 0;
  const INTERVAL = 4000;
  let timerId = null;

  function leftOf(index) {
    return slideImages[index].offsetLeft - sliderElement.offsetLeft;
  }

  function go(toIndex, isUser = false) {
    currentIndex = (toIndex + slideImages.length) % slideImages.length;
    sliderElement.scrollTo({ left: leftOf(currentIndex), behavior: "smooth" });
    dotElements.forEach((dot, idx) =>
      dot.classList.toggle("is-active", idx === currentIndex)
    );
    if (!isUser) restart();
  }

  function next() {
    go(currentIndex + 1);
  }

  function restart() {
    clearInterval(timerId);
    timerId = setInterval(next, INTERVAL);
  }

  dotElements.forEach((anchor, idx) => {
    anchor.addEventListener("click", (event) => {
      event.preventDefault();
      go(idx, true);
      restart();
    });
  });

  sliderElement.addEventListener("mouseenter", () => clearInterval(timerId));
  sliderElement.addEventListener("mouseleave", restart);
  document.addEventListener("visibilitychange", () => {
    if (document.hidden) clearInterval(timerId);
    else restart();
  });

  if (dotElements[0]) dotElements[0].classList.add("is-active");
  restart();
});
